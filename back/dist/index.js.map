{"version":3,"sources":["../src/index.js"],"names":["express","require","bodyParser","app","connection","use","urlencoded","extended","json","req","res","next","header","get","query","err","results","status","send","post","queryParams","console","log","body","where","push","who","when","id","params","server","listen","process","env","PORT","address","port"],"mappings":"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","file":"index.js","sourcesContent":["const express = require(\"express\");\nconst bodyParser = require(\"body-parser\");\n//const morgan = require('morgan');\nconst app = express();\nconst connection = require(\"./conf\");\n\napp.use(bodyParser.urlencoded({ extended: false }));\napp.use(bodyParser.json());\n\napp.use((req, res, next) => {\n  res.header(\"Access-Control-Allow-Origin\", \"*\");\n  res.header(\"Access-Control-Allow-Headers\", \"Authorization, Content-Type\");\n  res.header(\"Access-Control-Allow-Methods\", \"POST, GET, PUT, DELETE, OPTIONS\");\n  next();\n});\n// Marion : Début BDD mysql Loire en Vert\n// écoute de l'url \"/event\"\n\napp.get(\"/event\", (req, res) => {\n  // connection à la base de données, et sélection des évènements\n  connection.query(\"SELECT * from eventLoire\", (err, results) => {\n    if (err) {\n      // Si une erreur est survenue, alors on informe l'utilisateur de l'erreur\n      res.status(500).send(\"Erreur lors de la récupération des évènements\");\n    } else {\n      // Si tout s'est bien passé, on envoie le résultat de la requête SQL en tant que JSON.\n      res.json(results);\n    }\n  });\n});\n\napp.post(\"/event\", (req, res) => {\n  //Marion : sélectionne tous les évènements dans la table\n  let query = \"SELECT * from eventLoire\";\n  let queryParams = [];\n  console.log(req.body);\n  //Marion: si filtre where et où sont sélectionnés,...\n  //Julie Lisa : filtre event_date pour recupérer la date courante + interval choisi avec \"when\"\n  // Monica: J'use LIKE comme *, besoin d'utiliser tous les valeurs dans event_where, pareil pour who\n  // Monica: Modification de event_date_start >= now(), les events s'affichent bien à partir de NOW\n  if (req.body.where) {\n    query +=\n      \" WHERE event_where LIKE ? AND who LIKE ? \" +\n      \"AND event_date_start >= NOW()\" +\n      \"AND event_date_start < DATE_ADD(NOW(), INTERVAL ? DAY)\";\n    queryParams.push(req.body.where);\n    queryParams.push(req.body.who);\n    queryParams.push(req.body.when);\n  }\n  //fonction qui permet de garder le tri des endroits et passer le filtre who//\n  // Selon Greg ce code est mort, vérifier \"else if\"\n  else if (req.body.where) {\n    query += \" \";\n    queryParams.push(req.body.who);\n  }\n  console.log(query);\n  // ...connection à la base de données, et sélection des évènements filtrés avec le filtre where et who\n  connection.query(query, queryParams, (err, results) => {\n    console.log(err, results);\n    if (err) {\n      // Si une erreur est survenue, alors on informe l'utilisateur de l'erreur\n      res.status(500).send(err);\n    } else {\n      // Si tout s'est bien passé, on envoie le résultat de la requête SQL en tant que JSON.\n      res.json(results);\n    }\n  });\n});\n\n// Marion : connection à la base de données, et sélection du détail de l'évènement\napp.get(`/event/:id`, (req, res) => {\n  const id = req.params.id; // récupère id\n  connection.query(\n    \"SELECT * from eventLoire where id = ?\",\n    [id],\n    (err, results) => {\n      if (err) {\n        // Si une erreur est survenue, alors on informe l'utilisateur de l'erreur\n        res.status(500).send(\"Erreur lors de la récupération des évènements\");\n      } else {\n        // Si tout s'est bien passé, on envoie le résultat de la requête SQL en tant que JSON.\n        res.json(results[0]);\n      }\n    }\n  );\n});\n\n// Marion : Fin BDD mysql Loire en Vert\n\nlet server = app.listen(process.env.PORT || 5000, function() {\n  console.log(\"Listening on port \" + server.address().port);\n});\n"]}
{"version":3,"sources":["../src/index.js"],"names":[],"mappings":"AAAA","file":"index.js","sourcesContent":["/*const express = require(\"express\");\nconst bodyParser = require(\"body-parser\");\n//const morgan = require('morgan');\nconst app = express();\nconst connection = require(\"./conf\");\n\napp.use(bodyParser.urlencoded({ extended: false }));\napp.use(bodyParser.json());\n\napp.use((req, res, next) => {\n  res.header(\"Access-Control-Allow-Origin\", \"*\");\n  res.header(\"Access-Control-Allow-Headers\", \"Authorization, Content-Type\");\n  res.header(\"Access-Control-Allow-Methods\", \"POST, GET, PUT, DELETE, OPTIONS\");\n  next();\n});\n// Marion : Début BDD mysql Loire en Vert\n// écoute de l'url \"/event\"\n\napp.get(\"/event\", (req, res) => {\n  // connection à la base de données, et sélection des évènements\n  connection.query(\"SELECT * from eventLoire\", (err, results) => {\n    if (err) {\n      // Si une erreur est survenue, alors on informe l'utilisateur de l'erreur\n      res.status(500).send(\"Erreur lors de la récupération des évènements\");\n    } else {\n      // Si tout s'est bien passé, on envoie le résultat de la requête SQL en tant que JSON.\n      res.json(results);\n    }\n  });\n});\n\napp.post(\"/event\", (req, res) => {\n  //Marion : sélectionne tous les évènements dans la table\n  let query = \"SELECT * from eventLoire\";\n  let queryParams = [];\n  console.log(req.body);\n  //Marion: si filtre where et où sont sélectionnés,...\n  //Julie Lisa : filtre event_date pour recupérer la date courante + interval choisi avec \"when\"\n  // Monica: J'use LIKE comme *, besoin d'utiliser tous les valeurs dans event_where, pareil pour who\n  // Monica: Modification de event_date_start >= now(), les events s'affichent bien à partir de NOW\n  if (req.body.where) {\n    query +=\n      \" WHERE event_where LIKE ? AND who LIKE ? \" +\n      \"AND event_date_start >= NOW()\" +\n      \"AND event_date_start < DATE_ADD(NOW(), INTERVAL ? DAY)\";\n    queryParams.push(req.body.where);\n    queryParams.push(req.body.who);\n    queryParams.push(req.body.when);\n  }\n  //fonction qui permet de garder le tri des endroits et passer le filtre who//\n  // Selon Greg ce code est mort, vérifier \"else if\"\n  else if (req.body.where) {\n    query += \" \";\n    queryParams.push(req.body.who);\n  }\n  console.log(query);\n  // ...connection à la base de données, et sélection des évènements filtrés avec le filtre where et who\n  connection.query(query, queryParams, (err, results) => {\n    console.log(err, results);\n    if (err) {\n      // Si une erreur est survenue, alors on informe l'utilisateur de l'erreur\n      res.status(500).send(err);\n    } else {\n      // Si tout s'est bien passé, on envoie le résultat de la requête SQL en tant que JSON.\n      res.json(results);\n    }\n  });\n});\n\n// Marion : connection à la base de données, et sélection du détail de l'évènement\napp.get(`/event/:id`, (req, res) => {\n  const id = req.params.id; // récupère id\n  connection.query(\n    \"SELECT * from eventLoire where id = ?\",\n    [id],\n    (err, results) => {\n      if (err) {\n        // Si une erreur est survenue, alors on informe l'utilisateur de l'erreur\n        res.status(500).send(\"Erreur lors de la récupération des évènements\");\n      } else {\n        // Si tout s'est bien passé, on envoie le résultat de la requête SQL en tant que JSON.\n        res.json(results[0]);\n      }\n    }\n  );\n});\n\n// Marion : Fin BDD mysql Loire en Vert\n\nlet server = app.listen(process.env.PORT || 5000, function() {\n  console.log(\"Listening on port \" + server.address().port);\n});*/\n"]}